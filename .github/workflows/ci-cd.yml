name: PhotoMaster Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    env:
      SERVER_IP: 13.39.161.145

    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PEM_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          echo "Testing SSH connection..."
          ssh -i ~/.ssh/key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.SERVER_IP }} "echo Connection successful"

      - name: Clone or Pull Repository
        run: |
          echo "Setting up repository on server..."
          ssh -i ~/.ssh/key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.SERVER_IP }} << 'EOF'
            mkdir -p ~/.ssh

            echo "Configuring SSH for GitHub..."
            cat > ~/.ssh/config <<EOCONFIG
Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_ed25519
  IdentitiesOnly yes
EOCONFIG
            chmod 600 ~/.ssh/config

            if [ -d "~/PhotoMaster" ]; then
              echo "Repository exists, pulling latest changes..."
              cd ~/PhotoMaster
              git pull origin main
            else
              echo "Cloning repository using SSH..."
              git clone git@github.com:haidar-farhat/PhotoMaster.git ~/PhotoMaster
              cd ~/PhotoMaster
            fi

            ln -sf ~/PhotoMaster/deploy ~/deploy
            ln -sf ~/PhotoMaster/laravel ~/laravel
            ln -sf ~/PhotoMaster/electron-react ~/electron-react
EOF

      - name: Setup Server Environment
        run: |
          echo "Setting up server environment..."
          ssh -i ~/.ssh/key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.SERVER_IP }} << 'EOF'
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo usermod -aG docker $USER
            fi

            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            if ! command -v git &> /dev/null; then
              echo "Installing Git..."
              sudo apt-get update
              sudo apt-get install -y git
            fi

            echo "Creating directories..."
            sudo mkdir -p /var/www/photomaster/laravel/storage
            sudo mkdir -p /var/www/photomaster/laravel/bootstrap/cache
            sudo mkdir -p /var/www/photomaster/electron-react/build

            echo "Setting permissions..."
            sudo chown -R www-data:www-data /var/www/photomaster
            sudo chmod -R 775 /var/www/photomaster/laravel/storage
            sudo chmod -R 775 /var/www/photomaster/laravel/bootstrap/cache

            echo "Making scripts executable..."
            cd ~/deploy
            chmod +x *.sh
EOF

      - name: Run Setup Scripts
        run: |
          echo "Running setup scripts..."
          ssh -i ~/.ssh/key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.SERVER_IP }} << EOF
            cd ~/deploy
            ./setup.sh
            if [ ! -f ~/.db_setup_complete ]; then
              ./database.sh "${{ secrets.DB_ROOT_PASSWORD }}" "${{ secrets.DB_USERNAME }}" "${{ secrets.DB_PASSWORD }}"
              touch ~/.db_setup_complete
            fi
            ./app.sh "${{ secrets.DB_USERNAME }}" "${{ secrets.DB_PASSWORD }}"
EOF

      - name: Build and Deploy Docker Containers
        run: |
          echo "Building and deploying Docker containers..."
          ssh -i ~/.ssh/key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.SERVER_IP }} << EOF
            cd ~/deploy
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}

            cd ~/PhotoMaster
            sudo docker build -t photomaster-laravel:latest -f laravel/Dockerfile --target production ./laravel
            sudo docker build -t photomaster-react:latest -f electron-react/Dockerfile --target production ./electron-react

            cd ~/deploy
            sudo docker-compose down
            sudo docker-compose up -d

            sudo docker-compose ps
EOF

      - name: Deployment Summary
        run: |
          echo "Deployment completed successfully!"
          echo "Server: ${{ env.SERVER_IP }}"
          echo "Timestamp: $(date)"

      - name: Cleanup SSH Key
        if: always()
        run: rm -f ~/.ssh/key.pem

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Deployment Failed',
              body: `Deployment failed at ${new Date().toISOString()}.\n\n[View workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            })
