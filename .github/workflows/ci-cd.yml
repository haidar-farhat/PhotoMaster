name: PhotoMaster Deployment Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  SERVER_IP: 13.39.161.145
  APP_DIR: ~/PhotoMaster
  DEPLOY_DIR: ~/deploy

jobs:
  deploy:
    name: Production Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate Secrets
        run: |
          required_secrets=("EC2_PEM_KEY" "DB_ROOT_PASSWORD" "DB_USERNAME" "DB_PASSWORD")
          for secret in "${required_secrets[@]}"; do
            if [ -z "${{ secrets[$secret] }}" ]; then
              echo "::error::Missing required secret: $secret"
              exit 1
            fi
          done
          echo "âœ“ All secrets validated"

      - name: Configure SSH Connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PEM_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Verify Server Access
        run: |
          ssh -i ~/.ssh/key.pem -o ConnectTimeout=15 \
            ubuntu@${{ env.SERVER_IP }} "docker --version && docker-compose --version"

      - name: Synchronize Application Code
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} << 'EOSSH'
            set -eo pipefail
            
            # Ensure clean repository state
            if [ -d "$APP_DIR" ]; then
              cd "$APP_DIR"
              git fetch origin
              git reset --hard origin/main
              git clean -fd
            else
              git clone https://github.com/haidar-farhat/PhotoMaster.git "$APP_DIR"
            fi

            # Refresh symbolic links
            ln -sfn "$APP_DIR/deploy" ~/deploy
            ln -sfn "$APP_DIR/laravel" ~/laravel
            ln -sfn "$APP_DIR/electron-react" ~/electron-react


      - name: Execute Deployment Scripts
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} << 'EOF'
            cd "$DEPLOY_DIR"
            chmod +x *.sh
            
            # Conditional database setup
            if [ ! -f ~/.db_initialized ]; then
              ./database.sh \
                "${{ secrets.DB_ROOT_PASSWORD }}" \
                "${{ secrets.DB_USERNAME }}" \
                "${{ secrets.DB_PASSWORD }}"
              touch ~/.db_initialized
            fi

            ./app.sh "${{ secrets.DB_USERNAME }}" "${{ secrets.DB_PASSWORD }}"
EOF

      - name: Deploy Docker Services
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} << 'EOSSH'
            set -x
            cd "$DEPLOY_DIR"
            
            # Build fresh images
            docker build -t photomaster-laravel:latest \
              -f ../laravel/Dockerfile --target production ../laravel
            docker build -t photomaster-react:latest \
              -f ../electron-react/Dockerfile --target production ../electron-react

            # Rotate containers
            docker-compose down --timeout 30
            docker-compose up -d --force-recreate
            docker-compose ps --all
EOSSH

      - name: Verify Deployment
        run: |
          echo "âœ… Deployment completed successfully at $(date +'%Y-%m-%d %H:%M:%S %Z')"
          echo "Server: ${{ env.SERVER_IP }}"
          echo "Commit: ${{ github.sha }}"

      - name: Cleanup Credentials
        if: always()
        run: rm -f ~/.ssh/key.pem

      - name: Failure Handler
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const message = `
            Deployment failure detected!
            - Workflow: ${{ github.workflow }}
            - Server: ${{ env.SERVER_IP }}
            - Run ID: ${{ github.run_id }}
            - Commit: ${{ github.sha }}
            - Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            `;
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Deployment Failure - ${{ env.SERVER_IP }}',
              body: message.replace(/  +/g, ' ')
            });
