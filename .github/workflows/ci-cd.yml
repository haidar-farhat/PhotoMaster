name: PhotoMaster Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  laravel-test:
    name: Laravel Test
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: photomaster_test
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          tools: composer:v2
          extensions: mbstring, pdo_mysql, xml, zip, curl, gd

      - name: Install Laravel dependencies
        working-directory: ./laravel
        run: composer install --no-progress --no-interaction

      - name: Set up Laravel environment
        working-directory: ./laravel
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Run Laravel tests
        working-directory: ./laravel
        run: php artisan test

  react-test:
    name: React Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Fix package versions
        working-directory: ./electron-react
        run: |
          sed -i 's/"react": "^19.1.0"/"react": "^18.2.0"/' package.json
          sed -i 's/"react-dom": "^19.1.0"/"react-dom": "^18.2.0"/' package.json
          sed -i 's/"react-konva": "^19.0.3"/"react-konva": "^18.2.10"/' package.json

      - name: Install dependencies
        working-directory: ./electron-react
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Lint code
        working-directory: ./electron-react
        run: npm run lint

      - name: Run tests
        working-directory: ./electron-react
        run: npm test

  deploy:
    name: Deploy
    needs: [laravel-test, react-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      SERVER_IP: 13.39.161.145

    steps:
      - uses: actions/checkout@v4

      - name: Create deployment files
        run: |
          mkdir -p deploy

          # Create nginx.conf file
          echo 'server {' > deploy/nginx.conf
          echo '    listen 80;' >> deploy/nginx.conf
          echo '    server_name 13.39.161.145;' >> deploy/nginx.conf
          echo '    root /var/www/photomaster/laravel/public;' >> deploy/nginx.conf
          echo '' >> deploy/nginx.conf
          echo '    add_header X-Frame-Options "SAMEORIGIN";' >> deploy/nginx.conf
          echo '    add_header X-Content-Type-Options "nosniff";' >> deploy/nginx.conf
          echo '' >> deploy/nginx.conf
          echo '    index index.php;' >> deploy/nginx.conf
          echo '    charset utf-8;' >> deploy/nginx.conf
          echo '' >> deploy/nginx.conf
          echo '    location / {' >> deploy/nginx.conf
          echo '        try_files $uri $uri/ /index.php?$query_string;' >> deploy/nginx.conf
          echo '    }' >> deploy/nginx.conf
          echo '' >> deploy/nginx.conf
          echo '    location = /favicon.ico { access_log off; log_not_found off; }' >> deploy/nginx.conf
          echo '    location = /robots.txt  { access_log off; log_not_found off; }' >> deploy/nginx.conf
          echo '' >> deploy/nginx.conf
          echo '    error_page 404 /index.php;' >> deploy/nginx.conf
          echo '' >> deploy/nginx.conf
          echo '    location ~ \.php$ {' >> deploy/nginx.conf
          echo '        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;' >> deploy/nginx.conf
          echo '        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;' >> deploy/nginx.conf
          echo '        include fastcgi_params;' >> deploy/nginx.conf
          echo '    }' >> deploy/nginx.conf
          echo '' >> deploy/nginx.conf
          echo '    location ~ /\.(?!well-known).* {' >> deploy/nginx.conf
          echo '        deny all;' >> deploy/nginx.conf
          echo '    }' >> deploy/nginx.conf
          echo '}' >> deploy/nginx.conf

          # Create setup.sh script
          echo '#!/bin/bash' > deploy/setup.sh
          echo 'set -e' >> deploy/setup.sh
          echo '' >> deploy/setup.sh
          echo '# Logging function' >> deploy/setup.sh
          echo 'log() {' >> deploy/setup.sh
          echo '  echo "[$(date '"'"'+%Y-%m-%d %H:%M:%S'"'"')] $1"' >> deploy/setup.sh
          echo '}' >> deploy/setup.sh
          echo '' >> deploy/setup.sh
          echo 'log "Starting server setup"' >> deploy/setup.sh
          echo '' >> deploy/setup.sh
          echo '# Update system packages' >> deploy/setup.sh
          echo 'log "Updating packages"' >> deploy/setup.sh
          echo 'sudo apt-get update' >> deploy/setup.sh
          echo 'sudo apt-get install -y nginx mysql-server php8.1-fpm php8.1-cli php8.1-mysql \' >> deploy/setup.sh
          echo '  php8.1-mbstring php8.1-xml php8.1-zip php8.1-curl php8.1-gd php8.1-bcmath \' >> deploy/setup.sh
          echo '  php8.1-intl php8.1-soap php8.1-redis php8.1-common php8.1-json php8.1-opcache \' >> deploy/setup.sh
          echo '  curl git unzip nodejs npm redis-server' >> deploy/setup.sh
          echo '' >> deploy/setup.sh
          echo '# Install Composer' >> deploy/setup.sh
          echo 'log "Installing Composer"' >> deploy/setup.sh
          echo 'if ! command -v composer &> /dev/null; then' >> deploy/setup.sh
          echo '  curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer' >> deploy/setup.sh
          echo 'fi' >> deploy/setup.sh
          echo '' >> deploy/setup.sh
          echo '# Configure PHP' >> deploy/setup.sh
          echo 'log "Configuring PHP"' >> deploy/setup.sh
          echo 'sudo sed -i '"'"'s/memory_limit = .*/memory_limit = 512M/'"'"' /etc/php/8.1/fpm/php.ini' >> deploy/setup.sh
          echo 'sudo sed -i '"'"'s/upload_max_filesize = .*/upload_max_filesize = 64M/'"'"' /etc/php/8.1/fpm/php.ini' >> deploy/setup.sh
          echo 'sudo sed -i '"'"'s/post_max_size = .*/post_max_size = 64M/'"'"' /etc/php/8.1/fpm/php.ini' >> deploy/setup.sh
          echo '' >> deploy/setup.sh
          echo 'log "Setup completed successfully"' >> deploy/setup.sh

          # Create database.sh script
          echo '#!/bin/bash' > deploy/database.sh
          echo 'set -e' >> deploy/database.sh
          echo '' >> deploy/database.sh
          echo '# Logging function' >> deploy/database.sh
          echo 'log() {' >> deploy/database.sh
          echo '  echo "[$(date '"'"'+%Y-%m-%d %H:%M:%S'"'"')] $1"' >> deploy/database.sh
          echo '}' >> deploy/database.sh
          echo '' >> deploy/database.sh
          echo 'DB_ROOT_PASSWORD="$1"' >> deploy/database.sh
          echo 'DB_USERNAME="$2"' >> deploy/database.sh
          echo 'DB_PASSWORD="$3"' >> deploy/database.sh
          echo '' >> deploy/database.sh
          echo 'log "Configuring MySQL"' >> deploy/database.sh
          echo 'sudo mysql -e "ALTER USER '"'"'root'"'"'@'"'"'localhost'"'"' IDENTIFIED WITH mysql_native_password BY '"'"'${DB_ROOT_PASSWORD}'"'"';"' >> deploy/database.sh
          echo 'sudo mysql -e "CREATE DATABASE IF NOT EXISTS photomaster;"' >> deploy/database.sh
          echo 'sudo mysql -e "CREATE USER IF NOT EXISTS '"'"'${DB_USERNAME}'"'"'@'"'"'localhost'"'"' IDENTIFIED BY '"'"'${DB_PASSWORD}'"'"';"' >> deploy/database.sh
          echo 'sudo mysql -e "GRANT ALL PRIVILEGES ON photomaster.* TO '"'"'${DB_USERNAME}'"'"'@'"'"'localhost'"'"';"' >> deploy/database.sh
          echo 'sudo mysql -e "FLUSH PRIVILEGES;"' >> deploy/database.sh
          echo '' >> deploy/database.sh
          echo 'log "Database configured successfully"' >> deploy/database.sh

          # Create app.sh script
          echo '#!/bin/bash' > deploy/app.sh
          echo 'set -e' >> deploy/app.sh
          echo '' >> deploy/app.sh
          echo '# Logging function' >> deploy/app.sh
          echo 'log() {' >> deploy/app.sh
          echo '  echo "[$(date '"'"'+%Y-%m-%d %H:%M:%S'"'"')] $1"' >> deploy/app.sh
          echo '}' >> deploy/app.sh
          echo '' >> deploy/app.sh
          echo 'DB_USERNAME="$1"' >> deploy/app.sh
          echo 'DB_PASSWORD="$2"' >> deploy/app.sh
          echo 'REPO_URL="$3"' >> deploy/app.sh
          echo '' >> deploy/app.sh
          echo '# Setup application directory' >> deploy/app.sh
          echo 'log "Setting up application directory"' >> deploy/app.sh
          echo 'sudo mkdir -p /var/www/photomaster' >> deploy/app.sh
          echo 'sudo chown -R ubuntu:ubuntu /var/www/photomaster' >> deploy/app.sh
          echo '' >> deploy/app.sh
          echo '# Clone repository' >> deploy/app.sh
          echo 'log "Cloning repository"' >> deploy/app.sh
          echo 'cd /var/www/photomaster' >> deploy/app.sh
          echo '' >> deploy/app.sh
          echo 'if [ -d ".git" ]; then' >> deploy/app.sh
          echo '  git fetch --all' >> deploy/app.sh
          echo '  git reset --hard origin/main' >> deploy/app.sh
          echo 'else' >> deploy/app.sh
          echo '  cd /var/www' >> deploy/app.sh
          echo '  sudo rm -rf photomaster' >> deploy/app.sh
          echo '  git clone "$REPO_URL" photomaster' >> deploy/app.sh
          echo '  cd photomaster' >> deploy/app.sh
          echo '  git checkout main' >> deploy/app.sh
          echo 'fi' >> deploy/app.sh
          echo '' >> deploy/app.sh
          echo '# Deploy Laravel' >> deploy/app.sh
          echo 'log "Deploying Laravel"' >> deploy/app.sh
          echo 'cd /var/www/photomaster/laravel' >> deploy/app.sh
          echo 'composer install --no-dev --optimize-autoloader' >> deploy/app.sh
          echo '' >> deploy/app.sh
          echo '# Setup environment' >> deploy/app.sh
          echo 'cp .env.example .env' >> deploy/app.sh
          echo 'sed -i "s/DB_DATABASE=.*/DB_DATABASE=photomaster/" .env' >> deploy/app.sh
          echo 'sed -i "s/DB_USERNAME=.*/DB_USERNAME=${DB_USERNAME}/" .env' >> deploy/app.sh
          echo 'sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=${DB_PASSWORD}/" .env' >> deploy/app.sh
          echo 'php artisan key:generate' >> deploy/app.sh
          echo 'php artisan migrate --force' >> deploy/app.sh
          echo 'php artisan config:cache' >> deploy/app.sh
          echo 'php artisan route:cache' >> deploy/app.sh
          echo 'php artisan view:cache' >> deploy/app.sh
          echo '' >> deploy/app.sh
          echo '# Deploy React' >> deploy/app.sh
          echo 'log "Deploying React"' >> deploy/app.sh
          echo 'cd /var/www/photomaster/electron-react' >> deploy/app.sh
          echo 'npm install' >> deploy/app.sh
          echo 'npm run build' >> deploy/app.sh
          echo '' >> deploy/app.sh
          echo '# Set permissions' >> deploy/app.sh
          echo 'log "Setting permissions"' >> deploy/app.sh
          echo 'sudo chown -R www-data:www-data /var/www/photomaster' >> deploy/app.sh
          echo 'sudo chmod -R 755 /var/www/photomaster' >> deploy/app.sh
          echo 'sudo chmod -R 775 /var/www/photomaster/laravel/storage /var/www/photomaster/laravel/bootstrap/cache' >> deploy/app.sh
          echo '' >> deploy/app.sh
          echo '# Restart services' >> deploy/app.sh
          echo 'log "Restarting services"' >> deploy/app.sh
          echo 'sudo systemctl restart php8.1-fpm nginx mysql redis-server' >> deploy/app.sh
          echo 'sudo systemctl enable php8.1-fpm nginx mysql redis-server' >> deploy/app.sh
          echo '' >> deploy/app.sh
          echo 'log "Deployment completed successfully at $(date)"' >> deploy/app.sh

          chmod +x deploy/setup.sh deploy/database.sh deploy/app.sh

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PEM_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Copy scripts to server
        run: |
          scp -i ~/.ssh/key.pem -r deploy ubuntu@${{ env.SERVER_IP }}:~/

      - name: Install server requirements
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} "cd ~/deploy && ./setup.sh"

      - name: Configure Nginx
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} "sudo cp ~/deploy/nginx.conf /etc/nginx/sites-available/photomaster && sudo ln -sf /etc/nginx/sites-available/photomaster /etc/nginx/sites-enabled/ && sudo rm -f /etc/nginx/sites-enabled/default && sudo nginx -t && sudo systemctl restart nginx"

      - name: Setup database
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} "cd ~/deploy && ./database.sh '${{ secrets.DB_ROOT_PASSWORD }}' '${{ secrets.DB_USERNAME }}' '${{ secrets.DB_PASSWORD }}'"

      - name: Deploy application
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} "cd ~/deploy && ./app.sh '${{ secrets.DB_USERNAME }}' '${{ secrets.DB_PASSWORD }}' 'https://github.com/${{ github.repository }}.git'"

      - name: Cleanup
        if: always()
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} "rm -rf ~/deploy"
          rm -f ~/.ssh/key.pem

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Deployment failed',
              body: `Deployment to production failed at ${new Date().toISOString()}\n\nSee [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`
            });
