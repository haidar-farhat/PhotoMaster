name: PhotoMaster Deployment Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  SERVER_IP: 13.39.161.145
  APP_DIR: ~/PhotoMaster
  DEPLOY_DIR: ~/deploy

jobs:
  deploy:
    name: Production Deployment
    runs-on: ubuntu-latest
    permissions:
      issues: write


    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.EC2_PEM_KEY }}" ]; then
            echo "::error::Missing EC2_PEM_KEY secret"
            exit 1
          fi
          echo "âœ“ Secrets validation passed"

      - name: Configure SSH Connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PEM_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Verify Server Access
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} \
            "docker --version && docker-compose --version"

      - name: Synchronize Application Code
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} \
            "set -eo pipefail; \
            if [ -d \"${{ env.APP_DIR }}\" ]; then \
              cd \"${{ env.APP_DIR }}\" && \
              git fetch origin && \
              git reset --hard origin/main && \
              git clean -fd; \
            else \
              git clone https://github.com/haidar-farhat/PhotoMaster.git \"${{ env.APP_DIR }}\" \
            fi; \
            ln -sfn \"${{ env.APP_DIR }}/deploy\" ~/deploy && \
            ln -sfn \"${{ env.APP_DIR }}/laravel\" ~/laravel && \
            ln -sfn \"${{ env.APP_DIR }}/electron-react\" ~/electron-react"

      - name: Execute Deployment Scripts
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} \
            "set -eo pipefail; \
            cd \"${{ env.DEPLOY_DIR }}\" && \
            chmod +x *.sh && \
            if [ ! -f ~/.db_initialized ]; then \
              ./database.sh \
                \"${{ secrets.DB_ROOT_PASSWORD }}\" \
                \"${{ secrets.DB_USERNAME }}\" \
                \"${{ secrets.DB_PASSWORD }}\"; \
              touch ~/.db_initialized; \
            fi && \
            ./app.sh \
              \"${{ secrets.DB_USERNAME }}\" \
              \"${{ secrets.DB_PASSWORD }}\""

      - name: Deploy Docker Services
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} \
            "set -eo pipefail; \
            cd \"${{ env.DEPLOY_DIR }}\" && \
            docker build -t photomaster-laravel:latest \
              -f \"../laravel/Dockerfile\" --target production \"../laravel\" && \
            docker build -t photomaster-react:latest \
              -f \"../electron-react/Dockerfile\" --target production \"../electron-react\" && \
            docker-compose down --timeout 30 && \
            docker-compose up -d --force-recreate && \
            docker-compose ps --all"

      - name: Verify Deployment
        run: |
          echo "âœ… Deployment successful at $(date +'%Y-%m-%d %H:%M:%S %Z')"
          echo "Server: ${{ env.SERVER_IP }}"
          echo "Commit: ${{ github.sha }}"

      - name: Cleanup Credentials
        if: always()
        run: rm -f ~/.ssh/key.pem

      - name: Failure Notification
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Deployment Failed',
              body: `Deployment to ${{ env.SERVER_IP }} failed\n` +
                     `Workflow: ${{ github.workflow }}\n` +
                     `Commit: ${{ github.sha }}\n` +
                     `Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            })