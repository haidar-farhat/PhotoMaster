name: PhotoMaster Deployment Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  SERVER_IP: 52.47.95.15
  APP_DIR: ~/PhotoMaster
  # DEPLOY_DIR is less relevant now as we cd directly

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Laravel Image
        run: |
          docker build \
            --memory 1GB \
            --cpuset-cpus 0 \
            -t photomaster-laravel:latest \
            -f laravel/Dockerfile \
            --target production \
            laravel

      - name: Build React Image
        run: |
          docker build \
            --memory 1GB \
            --cpuset-cpus 0 \
            -t photomaster-react:latest \
            -f electron-react/Dockerfile \
            --target production \
            electron-react

      - name: Save Docker Images
        run: |
          mkdir -p docker-images
          docker save photomaster-laravel:latest -o docker-images/laravel.tar
          docker save photomaster-react:latest -o docker-images/react.tar

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: docker-images/*.tar

  deploy:
    name: Deploy to Server
    needs: build
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: docker-images
          path: docker-images

      - name: Load Docker Images
        run: |
          docker load -i docker-images/laravel.tar
          docker load -i docker-images/react.tar

      - name: Configure SSH Connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PEM_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Verify Server Access
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} \
            "docker --version && docker-compose --version"

      - name: Synchronize Application Code
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} \
            "set -eo pipefail;
            if [ -d \"${{ env.APP_DIR }}\" ]; then
              cd \"${{ env.APP_DIR }}\" &&
              git fetch origin &&
              git reset --hard origin/main &&
              git clean -fd;
            else
              git clone https://github.com/haidar-farhat/PhotoMaster.git \"${{ env.APP_DIR }}\"
            fi;
            ln -sfn \"${{ env.APP_DIR }}/deploy\" ~/deploy &&
            ln -sfn \"${{ env.APP_DIR }}/laravel\" ~/laravel &&
            ln -sfn \"${{ env.APP_DIR }}/electron-react\" ~/electron-react"

      - name: Create .env File
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} \
            "set -eo pipefail;
            cd \"${{ env.APP_DIR }}/deploy\" &&
            echo \"DB_ROOT_PASSWORD=\\\"${{ secrets.DB_ROOT_PASSWORD }}\\\"\" > .env &&
            echo \"DB_USERNAME=\\\"${{ secrets.DB_USERNAME }}\\\"\" >> .env &&
            echo \"DB_PASSWORD=\\\"${{ secrets.DB_PASSWORD }}\\\"\" >> .env"

      - name: Transfer Docker Images
        run: |
          scp -i ~/.ssh/key.pem docker-images/*.tar ubuntu@${{ env.SERVER_IP }}:~/docker-images/

      - name: Deploy Services
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} \
            "set -eo pipefail;
            cd \"${{ env.APP_DIR }}/deploy\" &&
            docker load -i ~/docker-images/laravel.tar &&
            docker load -i ~/docker-images/react.tar &&
            docker-compose down --timeout 60 &&
            sleep 30 &&
            docker-compose up -d --no-build &&
            sleep 30 &&
            docker-compose exec -T laravel bash -c '
              cd /var/www/html &&
              php artisan key:generate --force &&
              php artisan migrate --force
            '"

      - name: Verify Deployment
        run: |
          echo "âœ… Deployment successful at $(date +'%Y-%m-%d %H:%M:%S %Z')"
          echo "Server: ${{ env.SERVER_IP }}"
          echo "Commit: ${{ github.sha }}"

      - name: Cleanup Credentials
        if: always()
        run: rm -f ~/.ssh/key.pem

      - name: Failure Notification
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Deployment Failed',
              body: `Deployment to ${{ env.SERVER_IP }} failed\n` +
                     `Workflow: ${{ github.workflow }}\n` +
                     `Commit: ${{ github.sha }}\n` +
                     `Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            })