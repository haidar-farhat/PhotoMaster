name: PhotoMaster Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  laravel-test:
    name: Laravel Test
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: photomaster_test
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          tools: composer:v2
          extensions: mbstring, pdo_mysql, xml, zip, curl, gd

      - name: Install Laravel Dependencies
        working-directory: ./laravel
        run: composer install --no-progress --no-interaction

      - name: Set Up Laravel Environment
        working-directory: ./laravel
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan config:clear

      - name: Run Laravel Tests
        working-directory: ./laravel
        env:
          DB_DATABASE: photomaster_test
          DB_USERNAME: root
          DB_PASSWORD: password
        run: php artisan test --exclude-group incomplete

  react-test:
    name: React Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Update package.json
        working-directory: ./electron-react
        run: |
          npm pkg set dependencies.react="^18.2.0"
          npm pkg set dependencies.react-dom="^18.2.0"
          npm pkg set dependencies.react-konva="^18.2.10"
          npm pkg set engines.node=">=16.0.0"

      - name: NPM Diagnostics
        working-directory: ./electron-react
        run: |
          npm config list
          npm --version
          node --version

      - name: Clean NPM Cache
        run: |
          npm cache clean --force
          npm cache verify

      - name: Install Dependencies
        working-directory: ./electron-react
        timeout-minutes: 5
        run: |
          rm -rf node_modules package-lock.json
          npm install --no-fund --no-audit

      - name: Lint Code
        working-directory: ./electron-react
        run: npm run lint

      - name: Run Tests
        working-directory: ./electron-react
        run: npm test

  deploy:
    name: Deploy
    needs: [laravel-test, react-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      SERVER_IP: 13.39.161.145
    steps:
      - uses: actions/checkout@v4

      - name: Create Config Files
        run: |
          mkdir -p deploy

          echo "Creating nginx.conf"
          cat > deploy/nginx.conf <<EOF
server {
  listen 80;
  server_name ${SERVER_IP};
  root /var/www/photomaster/laravel/public;

  add_header X-Frame-Options "SAMEORIGIN";
  add_header X-Content-Type-Options "nosniff";

  index index.php;
  charset utf-8;

  location / {
      try_files \$uri \$uri/ /index.php?\$query_string;
  }

  location = /favicon.ico { access_log off; log_not_found off; }
  location = /robots.txt  { access_log off; log_not_found off; }

  error_page 404 /index.php;

  location ~ \.php$ {
      fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
      fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
      include fastcgi_params;
  }

  location ~ /\.(?!well-known).* {
      deny all;
  }
}
EOF

          echo "Creating PictureTest.php"
          cat > deploy/PictureTest.php <<EOL
<?php

namespace Tests\Feature;
use Tests\TestCase;

class PictureTest extends TestCase {
    /**
     * @group incomplete
     */
    public function test_upload_picture() {
        \$this->markTestSkipped("This functionality is not yet implemented");
    }
    /**
     * @group incomplete
     */
    public function test_replace_image() {
        \$this->markTestSkipped("This functionality is not yet implemented");
    }
    /**
     * @group incomplete
     */
    public function test_delete_picture() {
        \$this->markTestSkipped("This functionality is not yet implemented");
    }
}
EOL

          echo "Creating setup.sh"
          cat > deploy/setup.sh <<EOL
#!/bin/bash
set -e
echo "[\$(date '+%Y-%m-%d %H:%M:%S')] Starting server setup"
echo "[\$(date '+%Y-%m-%d %H:%M:%S')] Installing packages"
sudo apt-get update
sudo apt-get install -y nginx mysql-server php8.1-fpm php8.1-cli php8.1-mysql php8.1-mbstring php8.1-xml php8.1-zip php8.1-curl php8.1-gd php8.1-bcmath php8.1-intl php8.1-redis php8.1-common php8.1-json curl git unzip nodejs npm redis-server
echo "[\$(date '+%Y-%m-%d %H:%M:%S')] Installing Composer"
if ! command -v composer &>/dev/null; then
  curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
fi
echo "[\$(date '+%Y-%m-%d %H:%M:%S')] Configuring PHP"
sudo sed -i 's/memory_limit = .*/memory_limit = 512M/' /etc/php/8.1/fpm/php.ini
sudo sed -i 's/upload_max_filesize = .*/upload_max_filesize = 64M/' /etc/php/8.1/fpm/php.ini
sudo sed -i 's/post_max_size = .*/post_max_size = 64M/' /etc/php/8.1/fpm/php.ini
echo "[\$(date '+%Y-%m-%d %H:%M:%S')] Setup completed successfully"
EOL

          echo "Creating database.sh"
          cat > deploy/database.sh <<EOL
#!/bin/bash
set -e
DB_ROOT_PASSWORD="\$1"
DB_USERNAME="\$2"
DB_PASSWORD="\$3"
echo "[\$(date '+%Y-%m-%d %H:%M:%S')] Configuring MySQL"
sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '\$DB_ROOT_PASSWORD';"
sudo mysql -e "CREATE DATABASE IF NOT EXISTS photomaster;"
sudo mysql -e "CREATE USER IF NOT EXISTS '\$DB_USERNAME'@'localhost' IDENTIFIED BY '\$DB_PASSWORD';"
sudo mysql -e "GRANT ALL PRIVILEGES ON photomaster.* TO '\$DB_USERNAME'@'localhost';"
sudo mysql -e "DROP USER IF EXISTS ''@'localhost';"
sudo mysql -e "DROP DATABASE IF EXISTS test;"
sudo mysql -e "FLUSH PRIVILEGES;"
echo "[\$(date '+%Y-%m-%d %H:%M:%S')] Database configured successfully"
EOL

          echo "Creating app.sh"
          cat > deploy/app.sh <<EOL
#!/bin/bash
set -e
DB_USERNAME="\$1"
DB_PASSWORD="\$2"
REPO_URL="\$3"
echo "[\$(date '+%Y-%m-%d %H:%M:%S')] Setting up application directory"
sudo mkdir -p /var/www/photomaster
sudo chown -R ubuntu:ubuntu /var/www/photomaster
echo "[\$(date '+%Y-%m-%d %H:%M:%S')] Cloning repository"
cd /var/www/photomaster
if [ -d ".git" ]; then
  git fetch --all
  git reset --hard origin/main
else
  cd /var/www
  sudo rm -rf photomaster
  git clone "\$REPO_URL" photomaster
  cd photomaster
  git checkout main
fi
cp ~/deploy/PictureTest.php /var/www/photomaster/laravel/tests/Feature/PictureTest.php
echo "[\$(date '+%Y-%m-%d %H:%M:%S')] Deploying Laravel"
cd /var/www/photomaster/laravel
composer install --no-dev --optimize-autoloader
cp .env.example .env
sed -i "s/DB_DATABASE=.*/DB_DATABASE=photomaster/" .env
sed -i "s/DB_USERNAME=.*/DB_USERNAME=\$DB_USERNAME/" .env
sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=\$DB_PASSWORD/" .env
php artisan key:generate
php artisan migrate --force
php artisan config:cache
php artisan route:cache
php artisan view:cache
echo "[\$(date '+%Y-%m-%d %H:%M:%S')] Deploying React"
cd /var/www/photomaster/electron-react
npm install
npm run build
echo "[\$(date '+%Y-%m-%d %H:%M:%S')] Setting permissions"
sudo chown -R www-data:www-data /var/www/photomaster
sudo chmod -R 755 /var/www/photomaster
sudo chmod -R 775 /var/www/photomaster/laravel/storage /var/www/photomaster/laravel/bootstrap/cache
echo "[\$(date '+%Y-%m-%d %H:%M:%S')] Restarting services"
sudo systemctl restart php8.1-fpm nginx mysql redis-server
sudo systemctl enable php8.1-fpm nginx mysql redis-server
echo "[\$(date '+%Y-%m-%d %H:%M:%S')] Deployment completed successfully at \$(date)"
EOL

          chmod +x deploy/setup.sh deploy/database.sh deploy/app.sh

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PEM_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Copy Scripts to Server
        run: scp -i ~/.ssh/key.pem -o StrictHostKeyChecking=no -r deploy ubuntu@${{ env.SERVER_IP }}:~/

      - name: Install Server Requirements
        run: ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} "cd ~/deploy && ./setup.sh"

      - name: Configure Nginx
        run: ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} "sudo cp ~/deploy/nginx.conf /etc/nginx/sites-available/photomaster && sudo ln -sf /etc/nginx/sites-available/photomaster /etc/nginx/sites-enabled/ && sudo rm -f /etc/nginx/sites-enabled/default && sudo nginx -t && sudo systemctl restart nginx"

      - name: Setup Database
        run: ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} "cd ~/deploy && ./database.sh '${{ secrets.DB_ROOT_PASSWORD }}' '${{ secrets.DB_USERNAME }}' '${{ secrets.DB_PASSWORD }}'"

      - name: Deploy Application
        run: ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} "cd ~/deploy && ./app.sh '${{ secrets.DB_USERNAME }}' '${{ secrets.DB_PASSWORD }}' 'https://github.com/${{ github.repository }}.git'"

      - name: Cleanup
        if: always()
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} "rm -rf ~/deploy"
          rm -f ~/.ssh/key.pem

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Deployment failed',
              body: `Deployment to production failed at ${new Date().toISOString()}\n\nSee [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`
            });
