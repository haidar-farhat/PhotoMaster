name: PhotoMaster Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Test Laravel
        uses: docker/build-push-action@v5
        with:
          context: ./laravel
          target: test
          load: true
          tags: photomaster-laravel:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Test React
        uses: docker/build-push-action@v5
        with:
          context: ./electron-react
          target: test
          load: true
          tags: photomaster-react:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      SERVER_IP: 13.39.161.145

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Production Images
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          load: true
          tags: |
            photomaster-laravel:latest
            photomaster-react:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PEM_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to Server
        run: |
          # Create deployment directory
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} "mkdir -p ~/deploy"
          
          # Copy Docker Compose file
          cat > docker-compose.yml << 'EOL'
version: '3.8'

services:
  laravel:
    image: photomaster-laravel:latest
    restart: always
    environment:
      - DB_HOST=mysql
      - DB_DATABASE=photomaster
      - DB_USERNAME=${{ secrets.DB_USERNAME }}
      - DB_PASSWORD=${{ secrets.DB_PASSWORD }}
    volumes:
      - /var/www/photomaster/laravel/storage:/var/www/html/storage
      - /var/www/photomaster/laravel/bootstrap/cache:/var/www/html/bootstrap/cache
    depends_on:
      - mysql

  react:
    image: photomaster-react:latest
    restart: always
    volumes:
      - /var/www/photomaster/electron-react/build:/usr/share/nginx/html
    depends_on:
      - laravel

  mysql:
    image: mysql:8.0
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
      - MYSQL_DATABASE=photomaster
      - MYSQL_USER=${{ secrets.DB_USERNAME }}
      - MYSQL_PASSWORD=${{ secrets.DB_PASSWORD }}
    volumes:
      - mysql_data:/var/lib/mysql

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - /var/www/photomaster/laravel/public:/var/www/html/laravel
      - /var/www/photomaster/electron-react/build:/var/www/html/react
    depends_on:
      - laravel
      - react

volumes:
  mysql_data:
EOL

          # Create Nginx configuration
          cat > nginx.conf << 'EOL'
server {
    listen 80;
    server_name ${{ env.SERVER_IP }};
    
    # Laravel
    location /api {
        root /var/www/html/laravel;
        try_files $uri $uri/ /index.php?$query_string;
    }

    # React
    location / {
        root /var/www/html/react;
        try_files $uri $uri/ /index.html;
    }

    # PHP-FPM
    location ~ \.php$ {
        fastcgi_pass laravel:9000;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        include fastcgi_params;
    }
}
EOL

          # Copy files to server
          scp -i ~/.ssh/key.pem docker-compose.yml nginx.conf ubuntu@${{ env.SERVER_IP }}:~/deploy/

          # Deploy application
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} "cd ~/deploy && docker-compose down && docker-compose up -d"

      - name: Cleanup
        if: always()
        run: |
          ssh -i ~/.ssh/key.pem ubuntu@${{ env.SERVER_IP }} "rm -rf ~/deploy"
          rm -f ~/.ssh/key.pem

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Deployment failed',
              body: `Deployment to production failed at ${new Date().toISOString()}\n\nSee [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`
            });
