name: PhotoMaster Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Test Laravel
        uses: docker/build-push-action@v5
        with:
          context: ./laravel
          target: test
          load: true
          tags: photomaster-laravel:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Test React
        uses: docker/build-push-action@v5
        with:
          context: ./electron-react
          target: test
          load: true
          tags: photomaster-react:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to EC2
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    env:
      SERVER_IP: 13.39.161.145

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Production Images
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          load: true
          tags: |
            photomaster-laravel:latest
            photomaster-react:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PEM_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Copy Deployment Files
        run: |
          # Copy deployment scripts
          scp -i ~/.ssh/key.pem -o StrictHostKeyChecking=no deploy/*.sh ubuntu@${{ env.SERVER_IP }}:~/deploy/
          
          # Copy docker-compose and nginx.conf
          scp -i ~/.ssh/key.pem -o StrictHostKeyChecking=no deploy/docker-compose.yml deploy/nginx.conf ubuntu@${{ env.SERVER_IP }}:~/deploy/

      - name: Execute Remote Deployment
        run: |
          ssh -i ~/.ssh/key.pem -o StrictHostKeyChecking=no ubuntu@${{ env.SERVER_IP }} <<EOF
            chmod +x ~/deploy/*.sh
            cd ~/deploy
            ./setup.sh
            ./database.sh "${{ secrets.DB_ROOT_PASSWORD }}" "${{ secrets.DB_USERNAME }}" "${{ secrets.DB_PASSWORD }}"
            ./app.sh "${{ secrets.DB_USERNAME }}" "${{ secrets.DB_PASSWORD }}"
            docker-compose down
            docker-compose up -d
          EOF

      - name: Cleanup SSH Key
        if: always()
        run: rm -f ~/.ssh/key.pem

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Deployment Failed',
              body: `Deployment failed at ${new Date().toISOString()}.\n\n[View workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            })
